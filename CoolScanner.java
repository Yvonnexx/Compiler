/* The following code was generated by JFlex 1.4.3 on 5/31/13 3:37 PM */

//package cool;
import beaver.Symbol;
import beaver.Scanner;

/* 
	Terminals.java has all symbols.
*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/31/13 3:37 PM from the specification file
 * <tt>cool.jflex</tt>
 */
class CoolScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\51\10\0\1\13\1\11\2\0\1\13\22\0\1\13\1\53\1\7"+
    "\5\0\1\47\1\54\1\15\1\60\1\63\1\52\1\12\1\14\1\1"+
    "\11\2\1\55\1\62\1\56\1\57\1\64\2\0\22\4\1\33\7\4"+
    "\1\0\1\6\2\0\1\5\1\0\1\16\1\17\1\23\1\25\1\35"+
    "\1\27\1\42\1\24\1\30\1\40\1\41\1\31\1\34\1\10\1\26"+
    "\1\36\1\44\1\22\1\20\1\21\1\45\1\43\1\46\1\3\1\32"+
    "\1\37\1\50\1\0\1\61\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\3\1\5"+
    "\1\6\1\7\1\10\20\3\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\0\1\26\3\3\1\0\1\27\11\3\1\30"+
    "\6\3\1\31\13\3\1\32\1\33\1\34\1\26\1\0"+
    "\1\3\1\35\1\3\2\0\15\3\1\36\3\3\1\30"+
    "\12\3\1\37\2\3\1\0\1\3\1\13\4\3\1\40"+
    "\1\3\1\41\2\3\1\42\13\3\1\43\4\3\1\0"+
    "\2\3\1\44\2\3\1\45\1\3\1\46\1\3\1\30"+
    "\1\3\1\47\4\3\1\50\1\26\1\51\6\3\1\52"+
    "\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\152\0\237\0\324\0\u0109\0\u013e"+
    "\0\65\0\65\0\u0173\0\65\0\u01a8\0\u01dd\0\u0212\0\u0247"+
    "\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\u04f8\0\u052d\0\65\0\65\0\65"+
    "\0\65\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0"+
    "\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\237\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\237\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\65\0\65\0\65"+
    "\0\65\0\u0c6c\0\u0ca1\0\237\0\u0cd6\0\u06d5\0\u0d0b\0\u0d40"+
    "\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8"+
    "\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\237\0\u0ff1\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203"+
    "\0\u1238\0\u126d\0\u12a2\0\237\0\u12d7\0\u130c\0\u1341\0\u1376"+
    "\0\237\0\u13ab\0\u13e0\0\u1415\0\u144a\0\237\0\u147f\0\237"+
    "\0\u14b4\0\u14e9\0\237\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2"+
    "\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\237\0\u1765"+
    "\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\237\0\u18d8"+
    "\0\u190d\0\237\0\u1942\0\237\0\u1977\0\u19ac\0\u19e1\0\237"+
    "\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\237\0\u1839\0\237\0\u1aea"+
    "\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\237\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\2\1\7\1\10"+
    "\1\11\1\12\1\11\1\13\1\14\1\15\1\5\1\16"+
    "\1\17\1\20\1\21\1\5\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\6\1\30\1\31\1\32\4\5\1\33"+
    "\2\5\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\2"+
    "\66\0\2\4\63\0\5\5\2\0\1\5\5\0\31\5"+
    "\17\0\5\6\2\0\1\6\5\0\31\6\16\0\6\52"+
    "\1\53\1\54\1\52\1\0\53\52\1\0\5\5\2\0"+
    "\1\5\5\0\1\55\16\5\1\56\7\5\1\57\1\5"+
    "\32\0\1\60\1\61\50\0\5\5\2\0\1\5\5\0"+
    "\1\5\1\62\27\5\17\0\5\5\2\0\1\5\5\0"+
    "\17\5\1\63\7\5\1\64\1\5\17\0\5\5\2\0"+
    "\1\5\5\0\4\5\1\65\1\5\1\66\5\5\1\67"+
    "\14\5\17\0\5\5\2\0\1\5\5\0\17\5\1\70"+
    "\11\5\17\0\5\5\2\0\1\5\5\0\1\71\12\5"+
    "\1\72\15\5\17\0\5\5\2\0\1\5\5\0\10\5"+
    "\1\73\6\5\1\74\11\5\17\0\5\5\2\0\1\5"+
    "\5\0\1\5\1\75\23\5\1\76\3\5\17\0\5\5"+
    "\2\0\1\5\5\0\1\77\7\5\1\100\1\5\1\101"+
    "\16\5\17\0\5\5\2\0\1\5\5\0\11\5\1\102"+
    "\4\5\1\103\12\5\17\0\5\5\2\0\1\5\5\0"+
    "\1\104\30\5\17\0\5\5\2\0\1\5\5\0\12\5"+
    "\1\105\16\5\17\0\5\5\2\0\1\5\5\0\1\106"+
    "\30\5\17\0\2\5\1\107\2\5\2\0\1\5\5\0"+
    "\13\5\1\110\15\5\17\0\5\5\2\0\1\5\5\0"+
    "\1\111\3\5\1\112\24\5\17\0\5\5\2\0\1\5"+
    "\5\0\1\113\30\5\17\0\5\5\2\0\1\5\5\0"+
    "\6\5\1\114\3\5\1\115\16\5\75\0\1\116\64\0"+
    "\1\117\4\0\1\120\6\52\1\53\1\121\1\52\1\0"+
    "\53\52\1\0\1\52\4\0\3\52\6\0\1\52\1\0"+
    "\2\52\4\0\1\52\44\0\1\122\56\0\5\5\2\0"+
    "\1\5\5\0\3\5\1\123\25\5\17\0\5\5\2\0"+
    "\1\5\5\0\30\5\1\124\17\0\5\5\2\0\1\5"+
    "\5\0\13\5\1\125\15\5\16\0\11\60\1\11\53\60"+
    "\15\126\1\127\47\126\1\0\5\5\2\0\1\5\5\0"+
    "\2\5\1\130\26\5\17\0\5\5\2\0\1\5\5\0"+
    "\1\131\30\5\17\0\5\5\2\0\1\5\5\0\20\5"+
    "\1\132\10\5\17\0\5\5\2\0\1\5\5\0\1\133"+
    "\13\5\1\73\12\5\1\134\1\5\17\0\5\5\2\0"+
    "\1\5\5\0\4\5\1\135\5\5\1\136\16\5\17\0"+
    "\5\5\2\0\1\5\5\0\20\5\1\137\10\5\17\0"+
    "\5\5\2\0\1\5\5\0\3\5\1\140\22\5\1\141"+
    "\2\5\17\0\5\5\2\0\1\5\5\0\2\5\1\142"+
    "\1\143\25\5\17\0\5\5\2\0\1\5\5\0\1\144"+
    "\30\5\17\0\5\5\2\0\1\5\5\0\11\5\1\145"+
    "\17\5\17\0\5\5\2\0\1\5\5\0\22\5\1\146"+
    "\6\5\17\0\5\5\2\0\1\5\5\0\17\5\1\147"+
    "\11\5\17\0\5\5\2\0\1\5\5\0\13\5\1\150"+
    "\15\5\17\0\5\5\2\0\1\5\5\0\4\5\1\151"+
    "\24\5\17\0\5\5\2\0\1\152\5\0\31\5\17\0"+
    "\5\5\2\0\1\5\5\0\20\5\1\153\10\5\17\0"+
    "\5\5\2\0\1\5\5\0\21\5\1\154\7\5\17\0"+
    "\5\5\2\0\1\5\5\0\17\5\1\155\11\5\17\0"+
    "\5\5\2\0\1\5\5\0\3\5\1\156\25\5\17\0"+
    "\5\5\2\0\1\5\5\0\3\5\1\157\25\5\17\0"+
    "\5\5\2\0\1\5\5\0\2\5\1\160\26\5\17\0"+
    "\5\5\2\0\1\5\5\0\5\5\1\161\23\5\17\0"+
    "\5\5\2\0\1\5\5\0\10\5\1\162\1\5\1\163"+
    "\16\5\17\0\5\5\2\0\1\5\5\0\4\5\1\164"+
    "\6\5\1\73\15\5\17\0\5\5\2\0\1\5\5\0"+
    "\12\5\1\165\16\5\17\0\5\5\2\0\1\5\5\0"+
    "\3\5\1\166\25\5\16\0\7\122\1\167\55\122\1\0"+
    "\5\5\2\0\1\5\5\0\12\5\1\170\16\5\17\0"+
    "\5\5\2\0\1\5\5\0\13\5\1\171\15\5\16\0"+
    "\14\126\1\11\1\127\47\126\1\0\5\5\2\0\1\5"+
    "\5\0\3\5\1\172\25\5\17\0\5\5\2\0\1\5"+
    "\5\0\13\5\1\173\15\5\17\0\5\5\2\0\1\5"+
    "\5\0\17\5\1\174\11\5\17\0\5\5\2\0\1\5"+
    "\5\0\12\5\1\175\16\5\17\0\5\5\2\0\1\5"+
    "\5\0\17\5\1\176\11\5\17\0\5\5\2\0\1\5"+
    "\5\0\10\5\1\177\20\5\17\0\5\5\2\0\1\5"+
    "\5\0\2\5\1\200\26\5\17\0\5\5\2\0\1\5"+
    "\5\0\17\5\1\73\11\5\17\0\5\5\2\0\1\5"+
    "\5\0\27\5\1\201\1\5\17\0\5\5\2\0\1\5"+
    "\5\0\27\5\1\202\1\5\17\0\5\5\2\0\1\5"+
    "\5\0\17\5\1\203\11\5\17\0\5\5\2\0\1\5"+
    "\5\0\5\5\1\166\23\5\17\0\5\5\2\0\1\5"+
    "\5\0\2\5\1\204\26\5\17\0\5\5\2\0\1\5"+
    "\5\0\17\5\1\205\11\5\17\0\5\5\2\0\1\5"+
    "\5\0\4\5\1\206\24\5\17\0\5\5\2\0\1\5"+
    "\5\0\2\5\1\207\26\5\17\0\5\5\2\0\1\5"+
    "\5\0\15\5\1\210\13\5\17\0\5\5\2\0\1\5"+
    "\5\0\1\211\30\5\17\0\5\5\2\0\1\5\5\0"+
    "\10\5\1\212\2\5\1\213\15\5\17\0\5\5\2\0"+
    "\1\5\5\0\14\5\1\73\14\5\17\0\5\5\2\0"+
    "\1\5\5\0\13\5\1\214\15\5\17\0\5\5\2\0"+
    "\1\5\5\0\5\5\1\215\23\5\17\0\5\5\2\0"+
    "\1\5\5\0\17\5\1\216\11\5\17\0\5\5\2\0"+
    "\1\5\5\0\17\5\1\217\11\5\17\0\5\5\2\0"+
    "\1\5\5\0\23\5\1\220\5\5\17\0\5\5\2\0"+
    "\1\5\5\0\3\5\1\221\25\5\17\0\5\5\2\0"+
    "\1\5\5\0\25\5\1\222\3\5\17\0\5\5\2\0"+
    "\1\5\5\0\13\5\1\223\15\5\17\0\5\5\2\0"+
    "\1\5\5\0\6\5\1\73\22\5\16\0\7\122\1\224"+
    "\55\122\1\0\5\5\2\0\1\5\5\0\25\5\1\225"+
    "\3\5\17\0\5\5\2\0\1\5\5\0\4\5\1\226"+
    "\24\5\17\0\5\5\2\0\1\5\5\0\17\5\1\214"+
    "\11\5\17\0\5\5\2\0\1\5\5\0\4\5\1\227"+
    "\24\5\17\0\5\5\2\0\1\5\5\0\3\5\1\73"+
    "\25\5\17\0\5\5\2\0\1\5\5\0\30\5\1\73"+
    "\17\0\5\5\2\0\1\5\5\0\4\5\1\230\24\5"+
    "\17\0\5\5\2\0\1\5\5\0\12\5\1\231\16\5"+
    "\17\0\5\5\2\0\1\5\5\0\2\5\1\232\26\5"+
    "\17\0\5\5\2\0\1\5\5\0\5\5\1\175\23\5"+
    "\17\0\5\5\2\0\1\5\5\0\4\5\1\233\24\5"+
    "\17\0\5\5\2\0\1\5\5\0\17\5\1\234\11\5"+
    "\17\0\5\5\2\0\1\5\5\0\10\5\1\235\20\5"+
    "\17\0\5\5\2\0\1\5\5\0\13\5\1\236\15\5"+
    "\17\0\5\5\2\0\1\5\5\0\4\5\1\175\24\5"+
    "\17\0\5\5\2\0\1\5\5\0\12\5\1\237\16\5"+
    "\17\0\5\5\2\0\1\5\5\0\7\5\1\73\21\5"+
    "\17\0\5\5\2\0\1\5\5\0\6\5\1\240\22\5"+
    "\17\0\5\5\2\0\1\241\5\0\31\5\17\0\5\5"+
    "\2\0\1\5\5\0\1\242\30\5\17\0\5\5\2\0"+
    "\1\5\5\0\17\5\1\243\11\5\17\0\5\5\2\0"+
    "\1\5\5\0\1\244\30\5\17\0\5\5\2\0\1\5"+
    "\5\0\17\5\1\245\11\5\16\0\7\122\1\246\55\122"+
    "\1\0\5\5\2\0\1\5\5\0\17\5\1\247\11\5"+
    "\17\0\5\5\2\0\1\5\5\0\1\205\30\5\17\0"+
    "\5\5\2\0\1\73\5\0\31\5\17\0\5\5\2\0"+
    "\1\5\5\0\4\5\1\250\24\5\17\0\5\5\2\0"+
    "\1\5\5\0\12\5\1\251\16\5\17\0\5\5\2\0"+
    "\1\5\5\0\16\5\1\137\12\5\17\0\5\5\2\0"+
    "\1\5\5\0\13\5\1\154\15\5\17\0\5\5\2\0"+
    "\1\5\5\0\5\5\1\133\23\5\17\0\5\5\2\0"+
    "\1\5\5\0\7\5\1\252\21\5\17\0\5\5\2\0"+
    "\1\5\5\0\24\5\1\137\4\5\17\0\5\5\2\0"+
    "\1\5\5\0\5\5\1\253\23\5\17\0\5\5\2\0"+
    "\1\5\5\0\3\5\1\137\25\5\17\0\5\5\2\0"+
    "\1\5\5\0\17\5\1\254\11\5\17\0\5\5\2\0"+
    "\1\5\5\0\7\5\1\255\21\5\17\0\5\5\2\0"+
    "\1\5\5\0\2\5\1\256\26\5\17\0\5\5\2\0"+
    "\1\5\5\0\3\5\1\173\25\5\17\0\5\5\2\0"+
    "\1\5\5\0\2\5\1\73\26\5\17\0\5\5\2\0"+
    "\1\5\5\0\17\5\1\257\11\5\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7208];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\2\11\1\1\1\11\20\1\7\11"+
    "\2\1\4\11\2\0\4\1\1\0\35\1\4\11\1\0"+
    "\3\1\2\0\37\1\1\0\34\1\1\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/**
 * Return a new Symbol with the given token id, and with the current line and
 * column numbers.
 */
Symbol newSym(short tokenId) {
    return new Symbol(tokenId, yyline, yycolumn);
}

/**
 * Return a new Symbol with the given token id, the current line and column
 * numbers, and the given token value.  The value is used for tokens such as
 * identifiers and numbers.
 */
Symbol newSym(short tokenId, Object value) {
    return new Symbol(tokenId, yyline, yycolumn, value);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CoolScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { return newSym(Terminals.BOOLEAN, new String("True"));
          }
        case 44: break;
        case 11: 
          { return newSym(Terminals.NULL, yytext());
          }
        case 45: break;
        case 35: 
          { return newSym(Terminals.ELSE, yytext());
          }
        case 46: break;
        case 31: 
          { return newSym(Terminals.VAR, yytext());
          }
        case 47: break;
        case 40: 
          { return newSym(Terminals.WHILE, yytext());
          }
        case 48: break;
        case 4: 
          { return newSym(Terminals.TYPE, yytext());
          }
        case 49: break;
        case 37: 
          { return newSym(Terminals.CLASS, yytext());
          }
        case 50: break;
        case 26: 
          { return newSym(Terminals.LE, yytext());
          }
        case 51: break;
        case 14: 
          { return newSym(Terminals.RPAREN, yytext());
          }
        case 52: break;
        case 3: 
          { return newSym(Terminals.ID, yytext());
          }
        case 53: break;
        case 23: 
          { CoolError.errorReport("Unfinished comment",yytext());return newSym(Terminals.ID, yytext());
          }
        case 54: break;
        case 34: 
          { return newSym(Terminals.CASE, yytext());
          }
        case 55: break;
        case 22: 
          { return newSym(Terminals.STRING, yytext());
          }
        case 56: break;
        case 15: 
          { return newSym(Terminals.COLON, yytext());
          }
        case 57: break;
        case 19: 
          { return newSym(Terminals.RBRACE, yytext());
          }
        case 58: break;
        case 21: 
          { return newSym(Terminals.COMMA, yytext());
          }
        case 59: break;
        case 17: 
          { return newSym(Terminals.ASSIGN, yytext());
          }
        case 60: break;
        case 38: 
          { return newSym(Terminals.BOOLEAN, new String("False"));
          }
        case 61: break;
        case 33: 
          { return newSym(Terminals.THIS, yytext());
          }
        case 62: break;
        case 2: 
          { return newSym(Terminals.INTEGER, yytext());
          }
        case 63: break;
        case 41: 
          { return newSym(Terminals.NATIVE, yytext());
          }
        case 64: break;
        case 30: 
          { return newSym(Terminals.DEF, yytext());
          }
        case 65: break;
        case 24: 
          { CoolError.errorReport("Reserved Keywords",yytext());return newSym(Terminals.ID, yytext());
          }
        case 66: break;
        case 1: 
          { CoolError.errorReport("Illegal Character",yytext());
          }
        case 67: break;
        case 29: 
          { return newSym(Terminals.NEW, yytext());
          }
        case 68: break;
        case 12: 
          { return newSym(Terminals.MINUS, yytext());
          }
        case 69: break;
        case 20: 
          { return newSym(Terminals.SEMI, yytext());
          }
        case 70: break;
        case 9: 
          { return newSym(Terminals.LPAREN, yytext());
          }
        case 71: break;
        case 28: 
          { return newSym(Terminals.ARROW, yytext());
          }
        case 72: break;
        case 6: 
          { return newSym(Terminals.DOT, yytext());
          }
        case 73: break;
        case 7: 
          { return newSym(Terminals.DIV, yytext());
          }
        case 74: break;
        case 36: 
          { return newSym(Terminals.SUPER, yytext());
          }
        case 75: break;
        case 16: 
          { return newSym(Terminals.LT, yytext());
          }
        case 76: break;
        case 43: 
          { return newSym(Terminals.OVERRIDE, yytext());
          }
        case 77: break;
        case 25: 
          { return newSym(Terminals.IF, yytext());
          }
        case 78: break;
        case 39: 
          { return newSym(Terminals.MATCH, yytext());
          }
        case 79: break;
        case 13: 
          { return newSym(Terminals.NOT, yytext());
          }
        case 80: break;
        case 10: 
          { return newSym(Terminals.LBRACE, yytext());
          }
        case 81: break;
        case 27: 
          { return newSym(Terminals.EQUALS, yytext());
          }
        case 82: break;
        case 18: 
          { return newSym(Terminals.PLUS, yytext());
          }
        case 83: break;
        case 42: 
          { return newSym(Terminals.EXTENDS, yytext());
          }
        case 84: break;
        case 8: 
          { return newSym(Terminals.TIMES, yytext());
          }
        case 85: break;
        case 5: 
          { 
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new Symbol(Terminals.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
