import java.util.ArrayList;
import ast.*;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "cool.grammar".
 */
public class CoolParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pTbmUO5TKLn$ypmuAKvItBBknAMIdAWahHiC2k0POLH4sCNR76c22c6OrTWuKabX1RBCH" +
		"6i848KbHwbIuAmYfjZR4XCI2ANK6llxbxMMOVi##zB$fzVZhp$UwvzvnppzpoPkvvKb2XYz" +
		"LQlzFb#fbErjKwNrVeIbsbuxIVEYcX9lg3CIfFuvMZXyoNQRo6weywGHVf70qskzGg0z#VP" +
		"1JntBHUn#0rFetN6IcjbsKui#5ga6PcFtJRdhNukNhh80rIaGxJXNf4lUgqDTJlwxJjez6r" +
		"RAKrjh9Q#dur#lwCxxpOyNtVzT7vxklc6zMTwNIDLL2ZFqgdnVeCrR7eXkfuoaOwEstijaw" +
		"NhJjgwTl7#7QCqHqGe#iSepimHlTZftFhOhwgjIvHpqjYUZ$WT0zor#SEvBD2JtC7ggSXPe" +
		"gorDHiqvtSMVg5Hcga6K#4Nn7XHsh6VOYwgmtbeRh6VAZhTOCUrH7watwgN#9$bfL7s$Alv" +
		"ZyQgtirIXFrk7dVRDMJkbdDbQiHobE#fgg5MghGRDRHvYqDKpjrKB6wgOkwQd#UTh1wcCdg" +
		"gHBruHwW2fsaljI6w5GThYDrkaxHGFCHxM7w3ULlTO6krQLO$gmJAQ$JN$HhCz6yRbup4nZ" +
		"dttIZRZAlwkyy$nRTgjlq3zskktIt$gbxp9kwtxoX#$IO$gKnUjXyJiHnUi9yPZxL14tIP4" +
		"O$HKzfkdbFpsYsPcc6PcgQvcYkdjK2BTPyBT8yBT5IhT1oBTDpMgsLMgXLMgyNzBBMwdcjq" +
		"mPjqelQg3Nc2ONNIqg#AkMnA#5#PB533NZh6$AhRCpfawsclFDbx89Ons$kLSolhelzbHsC" +
		"RukCV3EBc8cNbyOhyGsiqPdbffdP3zqMNOkkl5$TrSE#loMyMtNP3azXgqXXgqjVr$Y#x$g" +
		"u#SRf0hxRU$HzKlIhBajI#jJMDQiLExNljwtRlIwgjIwPhqh0MTA6RAWtjVRSOSrZHltjMT" +
		"ESkpzhtfBxI1UXYDEtBUT0FqwGiFJv4jIZxC2fsedJkXN#1LQsisM2EzUUDmc#0maRjG3$b" +
		"ZpdCFG5MFF9sNFmp#7KyUoN9Q0So2bKnFaTZcIG2gsFJuzYM$FmpINtIzZ#2TlsRTaCdmIM" +
		"0UI0hR4ca8NeyYXzj7bMvxldvn8hdzPWHfTZwpdeZY1As0fin7AxKWdxzF3yBATCi6xrwTE" +
		"McNHW1HhmfcVZtP5TAC8QCBCyekIp7ZdCf1szz#CNUm2Zo6MV6hCwZLWV6IwrDaaNQobLNM" +
		"iF9Fyq2auJVmYo8vJ2NN0HkiiaxstdTo7K3#kk7TeVWFjW4ao5CV0eF8p3$iZ7dUzuc033Q" +
		"OoBn9XBCGqv6RaOEHgvrjdcKxo6V0gvtUaUWdck$XXCS$KBO3hS2LDGb3dzR8fZa7Egszf5" +
		"VG7o7EH2vxCIPi6piCZfBc7Umv0paHSZhqTYyaSWHrRxUAESVCJr2ST$egilWJNkcM7$PP4" +
		"vtqYVHiZdO2dSIvlv#pSWvqJyDZgv73R1As7RxfxyLRlzdC$DxbcCpryRjIN3Cy9uA#1v83" +
		"$nNuHAk0Ssm3fO3rNmAeo2hV06l0yVmElm5hn9m3kGMzmuFWL#E$usrzuCxy9sU8Td5o3Vm" +
		"v2Bt04VEh#F8dEvMmfyo8Bwq03T$R1hZqyGhj$dy2Ky23lH1SXFu6Fu2Zv35yPZlOAca0$D" +
		"mKFt1J81VDk2R6W9hO5n1KMG1pdG67Wt0iOTj80cq13QGo7i2$i0RrhG1jf1M#WCnT05UDU" +
		"24ZUtSYS79Uq9SSLSl9LkZr#AscblIThlovFwJznxd$sRq6zEyjlXv4xdanNnJpXP6D4DT$" +
		"A4YEva9qTKIvb8$CuHlmvErpDvR7kFLKsShtl$rDx9mKvVwUIwIFonaVfePv##TsnlHTApU" +
		"he#vyR5SktnhczstMFsUsSmholgw3icHTm9aVgCfBbK9VbEJH5dWElJAeNFB2Sh8xfbTVax" +
		"##fqy$wkuQfIp6LssdAxUJVM#ZzRSegOTURbMfQQVt6cqgobN6FhKskqJvf9vj$8ZMQ3qrI" +
		"PJJNMzOOlh5aDV74DNtsp31R38iEPOnPQh$cs$CHyx7gzO3YN3DzfizGiCDFDFAUVQyivPh" +
		"PvnImtIsnhbfbfPfXfvXdpjE6qDAlYvXSxvtUS$6#CRGkyRRv8qdvWTcGQ$V#wJY8Nz6oUs" +
		"9kS9fIzo75wgHx$Mdmofv0mQmfiHjO7sOTs1RA2TZb#vMHE9RHBQ9TXAqEMaXELaZkLOgyc" +
		"pDazos2RdzKZNmiWpE42oE9$a6Sv55irWUKGR5sHNR7r83FhGJlCbRkXwuRiZgp68niEm2C" +
		"l3XmUMNBWyCXvVOT7zXlO$yt5o69qnJnpJtstz68PYBqVCioO#zAlB#r15eySkvEE#Xfif2" +
		"u$");

	static final Action RETURN39 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 39];
		}
	};

	private final Action[] actions;

	public CoolParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = program
			new Action() {	// [1] program = classdecl.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolProgram(a);
				}
			},
			new Action() {	// [2] program = classdecl.a program.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					 return new CoolProgram(a,b);
				}
			},
			Action.RETURN,	// [3] program = bogus
			new Action() {	// [4] classdecl = CLASS.a TYPE.b varformals.c classdecl_1.d classbody.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					final Symbol _symbol_d = _symbols[offset + 4];
					final CoolNode d = (CoolNode) _symbol_d.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final CoolNode e = (CoolNode) _symbol_e.value;
					 return new CoolClass(a,b,c,d,e);
				}
			},
			new Action() {	// [5] classdecl = CLASS.a TYPE.b varformals.c classbody.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					final Symbol _symbol_d = _symbols[offset + 4];
					final CoolNode d = (CoolNode) _symbol_d.value;
					 return new CoolClass(a,b,c,d);
				}
			},
			new Action() {	// [6] classdecl_1 = EXTENDS.a classdecl_2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					 return new CoolClass1(a,b);
				}
			},
			new Action() {	// [7] classdecl_2 = TYPE.a actuals.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					 return new CoolClass2(a,b);
				}
			},
			new Action() {	// [8] classdecl_2 = NATIVE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new CoolClass2(a);
				}
			},
			new Action() {	// [9] actuals = LPAREN.a actuals_1.b RPAREN.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					 return new CoolActuals(a,b,c);
				}
			},
			new Action() {	// [10] actuals = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new CoolActuals(a,b);
				}
			},
			new Action() {	// [11] actuals_1 = expr.a COMMA.b actuals_1.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolActuals1(a,b,c);
				}
			},
			new Action() {	// [12] actuals_1 = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolActuals1(a);
				}
			},
			new Action() {	// [13] varformals = LPAREN.a varformals_1.b RPAREN.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					 return new CoolVarformals(a,b,c);
				}
			},
			new Action() {	// [14] varformals = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new CoolVarformals(a,b);
				}
			},
			new Action() {	// [15] varformals_1 = VAR.a ID.b COLON.c TYPE.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol d = _symbols[offset + 4];
					 return new CoolVarformals1(a,b,c,d);
				}
			},
			new Action() {	// [16] varformals_1 = VAR.a ID.b COLON.c TYPE.d COMMA.e varformals_1.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol d = _symbols[offset + 4];
					final Symbol e = _symbols[offset + 5];
					final Symbol _symbol_f = _symbols[offset + 6];
					final CoolNode f = (CoolNode) _symbol_f.value;
					 return new CoolVarformals1(a,b,c,d,e,f);
				}
			},
			new Action() {	// [17] classbody = LBRACE.a classbody_1.b RBRACE.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					 return new CoolClassBody(a,b,c);
				}
			},
			new Action() {	// [18] classbody = LBRACE.a RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new CoolClassBody(a,b);
				}
			},
			new Action() {	// [19] classbody_1 = feature.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolClassBody1(a);
				}
			},
			new Action() {	// [20] classbody_1 = feature.a classbody_1.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					 return new CoolClassBody1(a,b);
				}
			},
			new Action() {	// [21] feature = OVERRIDE.a DEF.b ID.c formals.d COLON.e TYPE.f ASSIGN.g feature_1.h SEMI.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_d = _symbols[offset + 4];
					final CoolNode d = (CoolNode) _symbol_d.value;
					final Symbol e = _symbols[offset + 5];
					final Symbol f = _symbols[offset + 6];
					final Symbol g = _symbols[offset + 7];
					final Symbol _symbol_h = _symbols[offset + 8];
					final CoolNode h = (CoolNode) _symbol_h.value;
					final Symbol i = _symbols[offset + 9];
					 return new CoolFeature(a,b,c,d,e,f,g,h,i);
				}
			},
			new Action() {	// [22] feature = DEF.a ID.b formals.c COLON.d TYPE.e ASSIGN.f feature_1.g SEMI.h
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					final Symbol d = _symbols[offset + 4];
					final Symbol e = _symbols[offset + 5];
					final Symbol f = _symbols[offset + 6];
					final Symbol _symbol_g = _symbols[offset + 7];
					final CoolNode g = (CoolNode) _symbol_g.value;
					final Symbol h = _symbols[offset + 8];
					 return new CoolFeature(a,b,c,d,e,f,g,h);
				}
			},
			new Action() {	// [23] feature = VAR.a ID.b feature_2.c SEMI.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					final Symbol d = _symbols[offset + 4];
					 return new CoolFeature(a,b,c,d);
				}
			},
			new Action() {	// [24] feature = LBRACE.a block.b RBRACE.c SEMI.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					final Symbol d = _symbols[offset + 4];
					 return new CoolFeature(a,b,c,d);
				}
			},
			new Action() {	// [25] feature = LBRACE.a RBRACE.b SEMI.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					 return new CoolFeature(a,b,c);
				}
			},
			new Action() {	// [26] feature_1 = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolFeature1(a);
				}
			},
			new Action() {	// [27] feature_1 = NATIVE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new CoolFeature1(a);
				}
			},
			new Action() {	// [28] feature_2 = ASSIGN.a NATIVE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new CoolFeature2(a,b);
				}
			},
			new Action() {	// [29] feature_2 = COLON.a TYPE.b ASSIGN.c expr.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_d = _symbols[offset + 4];
					final CoolNode d = (CoolNode) _symbol_d.value;
					 return new CoolFeature2(a,b,c,d);
				}
			},
			new Action() {	// [30] formals = LPAREN.a formals_1.b RPAREN.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					 return new CoolFormals(a,b,c);
				}
			},
			new Action() {	// [31] formals = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new CoolFormals(a,b);
				}
			},
			new Action() {	// [32] formals_1 = ID.a COLON.b TYPE.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					 return new CoolFormals1(a,b,c);
				}
			},
			new Action() {	// [33] formals_1 = ID.a COLON.b TYPE.c COMMA.d formals_1.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol d = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final CoolNode e = (CoolNode) _symbol_e.value;
					 return new CoolFormals1(a,b,c,d,e);
				}
			},
			new Action() {	// [34] block = expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final CoolNode e = (CoolNode) _symbol_e.value;
					 return new CoolBlock(e,1);
				}
			},
			new Action() {	// [35] block = block_1.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolBlock(a,2);
				}
			},
			new Action() {	// [36] block_1 = block_2.a expr.b SEMI.c expr.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_d = _symbols[offset + 4];
					final CoolNode d = (CoolNode) _symbol_d.value;
					 return new CoolBlock1(a,b,c,d,1);
				}
			},
			new Action() {	// [37] block_1 = block_2.a expr.b SEMI.c block_1.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_d = _symbols[offset + 4];
					final CoolNode d = (CoolNode) _symbol_d.value;
					 return new CoolBlock1(a,b,c,d,2);
				}
			},
			new Action() {	// [38] block_1 = expr.a SEMI.b expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolBlock1(a,b,c,3);
				}
			},
			new Action() {	// [39] block_1 = expr.a SEMI.b block_1.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolBlock1(a,b,c,4);
				}
			},
			new Action() {	// [40] block_2 = VAR.a ID.b COLON.c TYPE.d ASSIGN.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol d = _symbols[offset + 4];
					final Symbol e = _symbols[offset + 5];
					 return new CoolBlock2(a,b,c,d,e);
				}
			},
			new Action() {	// [41] expr = ID.a ASSIGN.b expr.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolExpr(a,b,c);
				}
			},
			new Action() {	// [42] expr = control.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolExpr(a);
				}
			},
			new Action() {	// [43] control = IF.a LPAREN.b expr.c RPAREN.d expr.e ELSE.f expr.g
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					final Symbol d = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final CoolNode e = (CoolNode) _symbol_e.value;
					final Symbol f = _symbols[offset + 6];
					final Symbol _symbol_g = _symbols[offset + 7];
					final CoolNode g = (CoolNode) _symbol_g.value;
					 return new CoolControl(a,b,c,d,e,f,g);
				}
			},
			new Action() {	// [44] control = WHILE.a LPAREN.b expr.c RPAREN.d expr.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					final Symbol d = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final CoolNode e = (CoolNode) _symbol_e.value;
					 return new CoolControl(a,b,c,d,e);
				}
			},
			new Action() {	// [45] control = match.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolControl(a);
				}
			},
			new Action() {	// [46] match = match.a MATCH.b cases.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolMatch(a,b,c);
				}
			},
			new Action() {	// [47] match = relation.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolMatch(a);
				}
			},
			new Action() {	// [48] relation = relation.a LE.b equiv.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolRelation(a,b,c,1);
				}
			},
			new Action() {	// [49] relation = relation.a LT.b equiv.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolRelation(a,b,c,2);
				}
			},
			new Action() {	// [50] relation = equiv.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolRelation(a,3);
				}
			},
			new Action() {	// [51] equiv = equiv.a EQUALS.b sum.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolEquiv(a,b,c);
				}
			},
			new Action() {	// [52] equiv = sum.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolEquiv(a);
				}
			},
			new Action() {	// [53] sum = sum.a PLUS.b prod.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolSum(a,b,c,1);
				}
			},
			new Action() {	// [54] sum = sum.a MINUS.b prod.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolSum(a,b,c,2);
				}
			},
			new Action() {	// [55] sum = prod.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolSum(a,3);
				}
			},
			new Action() {	// [56] prod = prod.a TIMES.b neg.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolProd(a,b,c,1);
				}
			},
			new Action() {	// [57] prod = prod.a DIV.b neg.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolProd(a,b,c,2);
				}
			},
			new Action() {	// [58] prod = neg.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolProd(a,3);
				}
			},
			new Action() {	// [59] neg = MINUS.a neg.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					 return new CoolNeg(a,b,1);
				}
			},
			new Action() {	// [60] neg = NOT.a neg.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					 return new CoolNeg(a,b,2);
				}
			},
			new Action() {	// [61] neg = dot.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolNeg(a,3);
				}
			},
			new Action() {	// [62] dot = dot.a DOT.b primary.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolDot(a,b,c);
				}
			},
			new Action() {	// [63] dot = primary.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolDot(a);
				}
			},
			new Action() {	// [64] primary = NEW.a TYPE.b actuals.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol _symbol_c = _symbols[offset + 3];
					final CoolNode c = (CoolNode) _symbol_c.value;
					 return new CoolPrimary(a,b,c,1);
				}
			},
			new Action() {	// [65] primary = ID.a actuals.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					 return new CoolPrimary(a,b,2);
				}
			},
			new Action() {	// [66] primary = SUPER.a DOT.b ID.c actuals.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_d = _symbols[offset + 4];
					final CoolNode d = (CoolNode) _symbol_d.value;
					 return new CoolPrimary(a,b,c,d,3);
				}
			},
			new Action() {	// [67] primary = LBRACE.a block.b RBRACE.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					 return new CoolPrimary(a,b,c,4);
				}
			},
			new Action() {	// [68] primary = LBRACE.a RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new CoolPrimary(a,b,5);
				}
			},
			new Action() {	// [69] primary = LPAREN.a expr.b RPAREN.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					 return new CoolPrimary(a,b,c,6);
				}
			},
			new Action() {	// [70] primary = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new CoolPrimary(a,b,7);
				}
			},
			new Action() {	// [71] primary = NULL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new CoolPrimary(a,8);
				}
			},
			new Action() {	// [72] primary = ID.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new CoolPrimary(a,9);
				}
			},
			new Action() {	// [73] primary = INTEGER.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new CoolPrimary(a,10);
				}
			},
			new Action() {	// [74] primary = STRING.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new CoolPrimary(a,11);
				}
			},
			new Action() {	// [75] primary = BOOLEAN.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new CoolPrimary(a,12);
				}
			},
			new Action() {	// [76] primary = THIS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new CoolPrimary(a,13);
				}
			},
			new Action() {	// [77] cases = LBRACE.a cases_1.b RBRACE.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					 return new CoolCases(a,b,c);
				}
			},
			new Action() {	// [78] cases_1 = cases_2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					 return new CoolCases1(a);
				}
			},
			new Action() {	// [79] cases_1 = cases_2.a cases_1.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final CoolNode a = (CoolNode) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					 return new CoolCases1(a,b);
				}
			},
			new Action() {	// [80] cases_2 = CASE.a cases_3.b ARROW.c block.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_d = _symbols[offset + 4];
					final CoolNode d = (CoolNode) _symbol_d.value;
					 return new CoolCases2(a,b,c,d);
				}
			},
			new Action() {	// [81] cases_2 = CASE.a cases_3.b ARROW.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 2];
					final CoolNode b = (CoolNode) _symbol_b.value;
					final Symbol c = _symbols[offset + 3];
					 return new CoolCases2(a,b,c);
				}
			},
			new Action() {	// [82] cases_3 = ID.a COLON.b TYPE.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					 return new CoolCases3(a,b,c);
				}
			},
			new Action() {	// [83] cases_3 = NULL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new CoolCases3(a);
				}
			},
			RETURN39	// [84] bogus = STUB CLASS EXTENDS VAR OVERRIDE DEF NATIVE NEW NULL THIS CASE MATCH IF ELSE WHILE SUPER LPAREN RPAREN LBRACE RBRACE COLON COMMA ASSIGN SEMI ARROW DOT PLUS MINUS TIMES DIV LE LT EQUALS NOT TYPE ID INTEGER STRING BOOLEAN; returns 'BOOLEAN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
